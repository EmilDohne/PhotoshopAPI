name: Build

on:
  workflow_dispatch:
  push:
    branches:
     - dev
     - 57-add-support-for-adjustment-layers
  pull_request:
    branches:
     - master
  release:
    types:
      - published

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
           - name: Ubuntu GCC
             os: ubuntu-24.04
             compiler: gcc-13
             compilercxx: g++-13
           - name: Ubuntu Clang
             os: ubuntu-24.04
             compiler: clang
             compilercxx: clang++
           - name: Windows MSVC
             os: windows-latest
             compiler: msvc
             compilercxx: msvc
           - name: MacOS ARM GCC
             os: macos-latest
             compiler: gcc-13
             compilercxx: g++-13

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    # We need to specify Xcode15.3 here as the default for macos-14 runners is 15.01 which has a bug 
    # causing linking to fail.
    - name: Setup Xcode 15.3
      if: matrix.os == 'macos-latest'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.3'

    # vcpkg requires ninja which isnt available by default on macos so we add it manually
    - name: Setup Ninja MacOS
      if: matrix.os == 'macos-latest'
      run: |
          brew install ninja
          brew install autoconf
          echo "Ninja build system installed"

    - name: Initialize vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/thirdparty/vcpkg'

    - name: Configure CMake ${{ matrix.os }}-${{ matrix.compilercxx }}
      env:
        CC: ${{ matrix.compiler }}
        CXX: ${{ matrix.compilercxx }}
      run: |
        cmake -B ${{github.workspace}}/build \
        -DCMAKE_OSX_ARCHITECTURES="arm64" \
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
        -DPSAPI_BUILD_DOCS=OFF \
        -DPSAPI_BUILD_BENCHMARKS=OFF \
        -DPSAPI_BUILD_EXAMPLES=ON \
        -DPSAPI_BUILD_PYTHON=OFF


    - name: Build ${{ matrix.os }}-${{ matrix.compilercxx }}
      # Build your program with the given configuration
      env:
        CC: ${{ matrix.compiler }}
        CXX: ${{ matrix.compilercxx }}
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}


    - name: Upload logs as artifacts
      if: always() # This ensures it runs even if the build fails
      uses: actions/upload-artifact@v3
      with:
         name: Build Logs
         path: |
            /Users/runner/work/PhotoshopAPI/PhotoshopAPI/thirdparty/vcpkg/buildtrees/detect_compiler/*.log
            /Users/runner/work/PhotoshopAPI/PhotoshopAPI/build/vcpkg-manifest-install.log